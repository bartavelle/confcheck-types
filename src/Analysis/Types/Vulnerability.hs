{-# LANGUAGE DeriveGeneric   #-}
{-# LANGUAGE TemplateHaskell #-}
module Analysis.Types.Vulnerability where

import           Control.DeepSeq
import           Control.Lens
import           Data.Serialize            (Serialize (..))
import           Data.Text                 (Text)
import           Data.Time                 (Day, fromGregorian)
import           Elm.Derive
import           GHC.Generics              (Generic)

import           Analysis.Types.ConfigInfo
import           Analysis.Types.File
import           Analysis.Types.Rhost
import           Analysis.Types.UnixUsers

-- severity
data Severity = None
              | Unknown
              | Low
              | Medium
              | High
              | CVSS Double
              deriving (Eq, Show, Generic)

instance NFData Severity

tocvss :: Severity -> Double
tocvss Unknown  = -1
tocvss None     = 0
tocvss Low      = 2
tocvss Medium   = 5
tocvss High     = 8
tocvss (CVSS x) = x

fromCVSS :: Double -> Severity
fromCVSS x | x < 0 = Unknown
           | x == 0 = None
           | x < 3 = Low
           | x < 7 = Medium
           | otherwise = High

instance Ord Severity where
    compare None Unknown = LT
    compare Unknown None = GT
    compare a b          = compare (tocvss a) (tocvss b)

instance Serialize Severity where

instance Semigroup Severity where
    (<>) = max

instance Monoid Severity where
    mempty = Unknown

-- vulnerability list
data Vulnerability = Vulnerability !Severity !VulnType
                   | ConfigInformation !ConfigInfo
                   | SomethingToCheck
                   deriving (Show, Eq, Generic)

instance Ord Vulnerability where
    compare (Vulnerability sa va) (Vulnerability sb vb) = compare sa sb <> compare va vb
    compare (Vulnerability _ _) _ = GT
    compare _ (Vulnerability _ _) = LT
    compare (ConfigInformation _) (ConfigInformation _) = EQ
    compare (ConfigInformation _) _ = LT
    compare _ (ConfigInformation _) = GT
    compare SomethingToCheck SomethingToCheck = EQ

data Multiple a
    = Multiple Text -- ^ description of the field that appears multiple times
               [a]  -- ^ occurences
    deriving (Show, Eq, Generic)

data OutdatedPackage
    = OP
    { _opTitle            :: Text
    , _opInstalledVersion :: Text
    , _opPatchVersion     :: Text
    , _opPublication      :: Day
    , _opDesc             :: Maybe Text
    } deriving (Show, Eq, Generic)

data MissingPatch
    = MP
    { _mpIdentifier  :: Text
    , _mpPublication :: Day
    , _mpDesc        :: Maybe Text
    } deriving (Show, Eq, Generic)

data WrongSysctl
    = WS
    { _sysctrlKey     :: Text
    , _sysctlActual   :: Text
    , _sysctlExpected :: Text
    , _sysctlDesc     :: Maybe Text
    } deriving (Show, Eq, Generic)

data VulnType = OutdatedPackage OutdatedPackage
              | MissingPatch MissingPatch
              | MultipleUser (Multiple PasswdEntry)
              | MultipleGroup (Multiple GroupEntry)
              | MultipleShadow (Multiple ShadowEntry)
              | VRhost Rhost
              | VFile FileVuln
              | MiscVuln Text
              | WrongSysctl WrongSysctl
              deriving (Show, Eq, Generic)

data FileVuln = ShouldNotBeWritable               { _vtReason :: Text, _vtFile :: UnixFile }
              | ShouldNotBeReadable               { _vtReason :: Text, _vtFile :: UnixFile }
              | ShouldBeOwnedBy { _vtOwner :: Text, _vtReason :: Text, _vtFile :: UnixFile }
              | StrangeSuid UnixFile
              deriving (Show, Eq, Generic)

instance Ord VulnType where
    compare a b = compare (td b) (td a)
        where
            td (OutdatedPackage (OP _ _ _ d _)) = d
            td (MissingPatch (MP _ d _))        = d
            td _                                = fromGregorian 1970 1 1

data VulnGroup = GErrors
               | GPackages
               | GAuthUnix
               | GAuthWin
               | GFS
               | GCron
               | GNet
               | GInfo
               | GMisc
               deriving (Ord, Eq)

_VulnGroup :: Prism' Text VulnGroup
_VulnGroup = prism' vg2txt parsevg
    where
        vg2txt GMisc     = "misc"
        vg2txt GFS       = "filesystem"
        vg2txt GErrors   = "errors"
        vg2txt GPackages = "packages"
        vg2txt GAuthWin  = "winauth"
        vg2txt GAuthUnix = "unixauth"
        vg2txt GInfo     = "info"
        vg2txt GCron     = "cron"
        vg2txt GNet      = "network"
        parsevg "errors"     = Just GErrors
        parsevg "packages"   = Just GPackages
        parsevg "winauth"    = Just GAuthWin
        parsevg "unixauth"   = Just GAuthUnix
        parsevg "info"       = Just GInfo
        parsevg "cron"       = Just GCron
        parsevg "filesystem" = Just GFS
        parsevg "network"    = Just GNet
        parsevg "misc"       = Just GMisc
        parsevg _            = Nothing

makeLenses ''VulnType
makeLenses ''FileVuln
makePrisms ''Vulnerability
makePrisms ''VulnType
makePrisms ''FileVuln
$(deriveBoth (defaultOptionsDropLower 3) ''FileVuln)
$(deriveBoth (defaultOptionsDropLower 3) ''OutdatedPackage)
$(deriveBoth (defaultOptionsDropLower 3) ''MissingPatch)
$(deriveBoth (defaultOptionsDropLower 0) ''Vulnerability)
$(deriveBoth (defaultOptionsDropLower 0) ''Multiple)
$(deriveBoth (defaultOptionsDropLower 0) ''VulnType)
$(deriveBoth (defaultOptionsDropLower 7) ''WrongSysctl)
$(deriveBoth (defaultOptionsDropLower 0) ''Severity)
